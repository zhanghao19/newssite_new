"""
Django settings for newssite_new project.

Generated by 'django-admin startproject' using Django 2.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/2.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.1/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))  # 项目的根目录, __file__代表当前的settings.py文件,abspath绝对路径


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '&x)a-&$inmdql0=1(j7wk%u((2bj!&!9l*j+sx-77#z--=9_7x'   # 安全密钥,很重要,在投放到生产环境之前要将其移到安全的地方,不可以直接放到settings代码中

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True    # 打开DEBUG就会泄露一些目录或代码等关键信息,这是非常危险的因此要确保在生产环境中是关闭状态

ALLOWED_HOSTS = ['*']   # 填写指定的ip地址,*标识可以匹配所有的ip地址,二级域名在后面追加


# Application definition

INSTALLED_APPS = [
    # 'django.contrib.auth',    # django自带的admin站点,当前由于是自己创建后台管理,所以已被禁用
    'django.contrib.auth',      # django自带的认证系统
    'django.contrib.contenttypes',  # 记录所有数据库模型中创建的元数据信息
    'django.contrib.sessions',      # 会话session数据可以在数据库中的django_session表中查看。
    'django.contrib.messages',      # 消息框架
    'django.contrib.staticfiles',   # 通过该应用找设定好的静态文件
]
"""
django在处理请求的时候,首先会通过django中间件进行一系列的处理，然后再通过默认的URL方式进行的. 中间件中设定的是从用户请求到用户请求结束期间所需要做的操作.
中间件的处理按照一定的顺序,即用户的请求会次从上到下依次执行MIDDLEWARE中的配置，然后服务器响应用户的时候会再次从下至上依次执行.
"""
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',    # 安全认证,判断请求方法是否被认可
    'django.contrib.sessions.middleware.SessionMiddleware',     # 判断用户端的session ID是否有效
    'django.middleware.common.CommonMiddleware',    # 会自动填充头部的https://或尾部的/
    'django.middleware.csrf.CsrfViewMiddleware',    # 跨站请求伪造
    'django.contrib.auth.middleware.AuthenticationMiddleware',  # 权限校验认证
    'django.contrib.messages.middleware.MessageMiddleware',     # app message 提供的中间件
    'django.middleware.clickjacking.XFrameOptionsMiddleware',   # 安全防护
]

ROOT_URLCONF = 'newssite_new.urls'      # 路由指向的路径

TEMPLATES = [   # 网站所需要的模板文件
    {   # 将模板文件渲染成html代码并传到前端界面显示
        'BACKEND': 'django.template.backends.django.DjangoTemplates',   # DjangoTemplates是django的模板渲染引擎
        'DIRS': [os.path.join(BASE_DIR, 'templates')],  # 模板存放的目录
        'APP_DIRS': True,   # 是否查找app中的模板
        'OPTIONS': {    # 传给模板引擎的额外参数
            'context_processors': [     # 上下文加载器就是在做render渲染模板的时候,默认对其执行如下渲染
                'django.template.context_processors.debug',     # 如果在模板渲染时出现错误,就会将错误信息渲染出来
                'django.template.context_processors.request',   # 使在模板中可以调用request
                'django.contrib.auth.context_processors.auth',  # 会将用户信息传递到context中,会将自带的用户信息传递
                'django.contrib.messages.context_processors.messages',  # 传递消息
            ],
        },
    },
]

WSGI_APPLICATION = 'newssite_new.wsgi.application'  # 指定wsgi服务器,是django runserver中自带的一个服务器
# 是框架与应用沟通的桥梁


# Database
# https://docs.djangoproject.com/en/2.1/ref/settings/#databases

DATABASES = {
    # 'default': {    # 默认数据库
    #     'ENGINE': 'django.db.backends.sqlite3',  # 文件数据库,仅可以做小量存储,不适合应用于项目
    #     'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    # },
    'default': {
        'ENGINE': 'django.db.backends.mysql',   # 数据库引擎
        'OPTIONS': {
            'read_default_file': 'utils/dbs/my.cnf',    # 读取数据库的配置信息
        },
    }
}

# 配置redis数据库
CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://127.0.0.1:6379/0",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        }
    },
}

# Password validation
# https://docs.djangoproject.com/en/2.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.1/howto/static-files/

STATIC_URL = '/static/'

# 配置日志器
LOGGING = {             # 表示放在logging的参数里面已字典的形式存在
    'version': 1,       # 版本号固定, 表示django在解读配置信息时里面的键值对参数名有特定的含义,默认自己实现,版本号为1.
    'disable_existing_loggers': False,      # 表示是不是要禁止已经存在的日志器, 在其他地方也有配置日志器.
    'formatters': {             # 表示日志输出的格式
        'verbose': {            # 表示复杂点的格式
            'format': '%(levelname)s %(asctime)s %(module)s %(lineno)d %(message)s'
        },
        'simple': {             # 表示简单格式
            #  表示他的等级在模块的第几行出现的信息
            'format': '%(levelname)s %(module)s %(lineno)d %(message)s'
        },
    },
    'filters': {            # 过滤器, 表示是否屏蔽在其他地方输出的日志信息. django默认不做任何屏蔽
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        },
    },
    'handlers': {       # 代表处理器
        'console': {        # 终端
            'level': 'DEBUG',       # debug级别以上的都可以写
            'filters': ['require_debug_true'],
            'class': 'logging.StreamHandler',
            'formatter': 'simple'
        },
        'file': {           # 文件
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',
            # BASE_DIR 指的是里面内嵌的test_pr 目录
            'filename': os.path.join(BASE_DIR, "logs/news.log"),  # 日志文件的位置
            'maxBytes': 300 * 1024 * 1024,          # 每个文件的最大值,满了自动产生新文件
            'backupCount': 10,                      # 保留多少个文件
            'formatter': 'verbose'
        },
    },
    'loggers': {        # 创建logger日志器的对象,是通过配置方式创建,不是真定义
        'django': {  # 定义了一个名为django的日志器
            'handlers': ['console', 'file'],        # 可以往终端和文件里面写
            'propagate': True,      # 表示django日志器执行完后还可以再传递,别的日志器也可以再使用
        },
    }
}